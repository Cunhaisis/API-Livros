package br.com.api.books.bookstan.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import br.com.api.books.bookstan.model.Livro;
import br.com.api.books.bookstan.repository.LivroRepository;

/**
 *
 * A sample greetings controller to return greeting text
 */
@RestController
public class GreetingsController {
	
	@Autowired
	private LivroRepository livroRepository;
    /**
     *
     * @param name the name to greet
     * @return greeting text
     */
    @RequestMapping(value = "/{name}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public String greetingText(@PathVariable String name) {
        return "Meus Livros " + name + "!";
    }
    
    @RequestMapping(value = "/livros/{nome}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public String OlaMundo(@PathVariable String nome) {
    	
    	return "Ultimos livros lidos: " + nome;
    	
    }
    
    @GetMapping(value = "listatodos")
    @ResponseBody
    public ResponseEntity<List<Livro>> listaLivro() {
    	
    	List<Livro> livros = livroRepository.findAll();
    	
    	return new ResponseEntity<List<Livro>>(livros, HttpStatus.OK);
    }
    
    @PostMapping(value = "salvar")
    @ResponseBody
    public ResponseEntity<Livro> salvar(@RequestBody Livro livro) {
    	
    	Livro book = livroRepository.save(livro);
    	
    	return new ResponseEntity<>(book, HttpStatus.CREATED);
    }
    
    @DeleteMapping(value = "delete")
	@ResponseBody
	public ResponseEntity<String> delete(@RequestParam Long idlivro) {

		livroRepository.deleteById(idlivro);

		return new ResponseEntity<String>("Livro deletado com sucesso", HttpStatus.OK);

	}
    
    @GetMapping(value = "buscarlivroid")
	@ResponseBody
	public ResponseEntity<Livro> buscaruserid(@RequestParam(name = "idlivro") Long idlivro) {

		Livro livro = livroRepository.findById(idlivro).get();

		return new ResponseEntity<Livro>(livro, HttpStatus.OK);

	}
	
	@PutMapping(value = "atualizar")
	@ResponseBody
	public ResponseEntity<Livro> atualizar(@RequestBody Livro livro) {

		Livro book = livroRepository.saveAndFlush(livro);

		return new ResponseEntity<Livro>(book, HttpStatus.OK);

	}
	
	@GetMapping(value = "buscarPorNome")
	@ResponseBody
	public ResponseEntity<List<Livro>> buscarPorNome(@RequestParam(name = "name") String name) {

		List<Livro> livro = livroRepository.buscarPorNome(name);

		return new ResponseEntity<List<Livro>>(livro, HttpStatus.OK);

	}
	    
}
